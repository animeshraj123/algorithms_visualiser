{"version":3,"sources":["utils/thumbs/binary.jpg","utils/thumbs/nqueens.jpg","utils/thumbs/path.jpg","utils/thumbs/sorting.jpg","utils/thumbs/word_search.jpg","utils/svg/maskShapesNew.svg","backTrackingAlgorithms/nQueensProblem/crown.png","utils/navbar.jsx","utils/indexTable.jsx","wordSearchVisualiser/wordSearch-utils/chars.js","wordSearchVisualiser/Cell/Cell.jsx","utils/randomIntFromInterval.js","wordSearchVisualiser/algorithms/wordDFS.js","utils/backbar.jsx","wordSearchVisualiser/wordSearch-utils/problemStatement.jsx","wordSearchVisualiser/wordSearch.jsx","PathFinder/Node/Node.jsx","PathFinder/algorithms/dijkstra.js","PathFinder/algorithms/breadthFirstSearch.js","PathFinder/algorithms/depthFirstSearch.js","PathFinder/utils/generateMaze.js","PathFinder/utils/highlightMazeNodes.js","PathFinder/utils/legend.jsx","PathFinder/PathFinder.jsx","PathFinder/utils/complexityTable.jsx","sortingAlgorithms/complexityTable.jsx","sortingAlgorithms/sortingAlgorithms/swap.js","sortingAlgorithms/sortingAlgorithms/quickSort.js","sortingAlgorithms/sortingAlgorithms/mergeSort.js","sortingAlgorithms/sortingAlgorithms/heapSort.js","sortingAlgorithms/cellColors.js","sortingAlgorithms/sortingVisualiser.jsx","sortingAlgorithms/sortingAlgorithms/bubbleSort.js","sortingAlgorithms/sortingAlgorithms/insertionSort.js","sortingAlgorithms/sortingAlgorithms/selectionSort.js","utils/header.jsx","searchingAlgorithms/arrayTile.jsx","searchingAlgorithms/binarySearch/binarySearch.jsx","searchingAlgorithms/searchingAlgorithms.js","searchingAlgorithms/linearSearch/linearSearch.jsx","backTrackingAlgorithms/backTrackingAlgorithms.js","backTrackingAlgorithms/nQueensProblem/nQueensProblem.jsx","App.js","index.js"],"names":["module","exports","NavBar","className","href","maskStyles","margin","textAlign","backgroundImage","MaskedStyleSVG","backgroundSize","backgroundPosition","backgroundRepeat","width","backgroundClip","WebkitBackgroundClip","color","IndexTable","props","state","style","to","src","PathThumb","alt","SortingThumb","BinaryThumb","NQueensThumb","WordSearch","React","Component","CHARS","Cell","this","row","col","val","extraClass","found","id","randomIntFromInterval","min","max","Math","floor","random","dfs","grid","i","j","count","word","animations","length","push","charAt","temp","BackBar","ProblemStatement","disabled","resetArray","cell","document","getElementById","console","log","clearBoard","gridBox","setProperty","array","Array","visited","setState","value","toUpperCase","wordDFS","founds","slice","highlightSection","k","testing","setTimeout","classList","transition","add","alert","map","ele","idx","key","type","placeholder","role","aria-label","onClick","newBoard","visualiseWordSearch","Node","isFinish","isStart","isWall","onNodeClick","onNodeOver","onNodeOut","extraClassName","onMouseOver","onMouseOut","dijkstra","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","getAllNodes","sortNodesByDistance","closestNode","shift","Infinity","calculatePath","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","node","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","shortestPathNodes","currentNode","unshift","getAllNeighbors","ROWS","COLS","generateMaze","ROW","COL","maze","generate","height","getNodeNeighbors","nodeArray","SPEED","borderStyles","border","Legend","ComplexityTable","SCREEN_WIDTH","window","screen","PathFinder","modifyingNodeState","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","disableMazesButton","disableNodesButton","disableClearMazeButton","disableClearPathButton","disableAlgoDropdown","disablePerformButton","highlightMazeNodes","isGridDiagonalsHighlighted","speed","setUpGrid","createNode","cost","F","G","H","remove","nodeVal","nRow","nCol","parseInt","highlightGrid","unHighlightGrid","highlightGridDiagonals","unHighlightGridDiagonals","NODE_STATE","toggleStartOrFinish","toggleWall","NODE_ROW","NODE_COL","nodeType","newGrid","newNode","mazeGrid","STATE","algorithm","visualiseAlgorithms","nodesInShortestPathOrder","STARTNODE","FINISHNODE","queue","bfs","stack","pop","animatePath","animateShortestPath","Container","fluid","Row","Col","sm","unHighlightDiagonals","highlightDiagonals","handleNodeOperations","highlightNodes","unHighlightNodes","Button","variant","modifyNodeState","clearPath","InputGroup","Form","Control","defaultValue","as","Append","selectAlgorithm","colSpan","swap","arr","quickSortHelper","left","right","pivot","getMergeSortAnimations","auxiliaryArray","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","doMerge","buildMaxHeap","heapify","index","leftChild","righChild","heap","cellColors","reverse","SortingVisualiser","SIZE_OF_BOARD","drawBoard","arrayBoard","innerHTML","container","createElement","appendChild","cellStyle","backgroundColor","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","bubbleSort","selectionSort","insertionSort","quickSort","heapSort","mergeSort","speedFactor","arrayBlocks","getElementsByClassName","idxOne","idxTwo","elemOne","elemTwo","blockOne","blockTwo","blockOneStyle","blockTwoStyle","blockOneIdx","newColor","getQuickSortAnimations","items","visualiseAnimations","isSorted","counter","getBubbleSortAnimations","getInsertionSortAnimations","currentIdx","smallestIdx","getSelectionSortAnimations","lastElement","getHeapSortAnimations","Prepend","Header","title","colorName","ArrayTile","BinarySearch","elementFoundAt","target","msgAfterExecution","previousLength","prevArray","sortedArray","a","b","start","end","arrayTiles","binarySearchAnimations","element","mid","resetAllTiles","hightlightWithinBounds","FormControl","binarySearch","LinearSearch","msg","linearSearchAnimations","currentEle","arrayBar","arrayBarStyle","linearSearch","createBoard","size","board","getRowsOfZeroes","solveNQueenUtil","N","isSafe","ANIMATION_SPEED_SECONDS","NQueensProblem","SIZE","padding","fontSize","item","crownsI","l","crown","resultsDiv","NQueensAnimations","getNQueensAnimations","isQueenSafe","prepend","trueValues","readOnly","searchCombined","App","exact","path","component","ReactDOM","render"],"mappings":"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","file":"static/js/main.4598616b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/binary.4fb0b3b5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/nqueens.7f3c1a9c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/path.d11aeb7b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sorting.24327830.jpg\";","module.exports = __webpack_public_path__ + \"static/media/word_search.e99173a0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/maskShapesNew.21c7355f.svg\";","module.exports = __webpack_public_path__ + \"static/media/crown.684af6ea.png\";","import React from \"react\";\n\nconst NavBar = () => (\n  <div className=\"bg-danger py-2 px-2\">\n    <span>\n      <div className=\"btn-sm text-decoration-none bg-danger rounded-0 text-light\">\n      <a className=\"btn-sm text-decoration-none bg-danger rounded-0 text-light\" href=\"/\">\n        &nbsp; Algorithms Visualiser\n      </a>\n      </div>\n    </span>\n  </div>\n);\n\nexport default NavBar;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nimport BinaryThumb from \"./thumbs/binary.jpg\";\nimport NQueensThumb from \"./thumbs/nqueens.jpg\";\nimport PathThumb from \"./thumbs/path.jpg\";\nimport SortingThumb from \"./thumbs/sorting.jpg\";\nimport WordSearch from \"./thumbs/word_search.jpg\";\nimport MaskedStyleSVG from \"./svg/maskShapesNew.svg\";\n\nconst maskStyles = {\n  margin: \"0 auto\",\n  textAlign: \"center\",\n  backgroundImage: `url(${MaskedStyleSVG})`,\n  backgroundSize: \"cover\",\n  backgroundPosition: \"50%\",\n  backgroundRepeat: \"no-repeat\",\n  width: \"auto\",\n  backgroundClip: \"text\",\n  WebkitBackgroundClip: \"text\",\n  color: \"transparent\",\n};\nexport default class IndexTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"container mt-3\">\n        <div className=\"text-center text-light\">\n          <h1 style={maskStyles} className=\"maskText mt-1\">\n            Algorithms\n            <br />\n            Visualiser\n          </h1>\n        </div>\n        <center>\n          <div className=\"row mt-4\">\n            <div className=\"col-sm-4 col-6\">\n              <NavLink to=\"/pathfinder\">\n                <img\n                  className=\"img-fluid w-20 shadowB block-example border border-white\"\n                  src={PathThumb}\n                  alt=\"Path Finding\"\n                />\n                <p className=\"text-light thumb-title font-weight-bold\">PathFinder</p>\n              </NavLink>\n            </div>\n            <div className=\"col-sm-4 col-6\">\n              <NavLink to=\"/sorting\">\n                <img\n                  className=\"img-fluid w-20 shadowB block-example border border-white\"\n                  src={SortingThumb}\n                  alt=\"Sorting\"\n                />\n                <p className=\"text-light thumb-title\">Sorting</p>\n              </NavLink>\n            </div>\n            <div className=\"col-sm-4 col-6\">\n              <NavLink to=\"/searching\">\n                <img\n                  className=\"img-fluid w-20 shadowB block-example border border-white\"\n                  src={BinaryThumb}\n                  alt=\"Searching\"\n                />\n                <p className=\"text-light thumb-title\">Searching</p>\n              </NavLink>\n            </div>\n            <div className=\"col-sm-4 col-6\">\n              <NavLink to=\"/n-queens-problem\">\n                <img\n                  className=\"img-fluid w-20 shadowB block-example border border-white\"\n                  src={NQueensThumb}\n                  alt=\"NQueens\"\n                />\n                <p className=\"text-light thumb-title\">N-Queens</p>\n              </NavLink>\n            </div>\n            <div className=\"col-sm-4 col-6\">\n              <NavLink to=\"/word-search\">\n                <img\n                  className=\"img-fluid w-20 shadowB block-example border border-white\"\n                  src={WordSearch}\n                  alt=\"Word Searching\"\n                />\n                <p className=\"text-light thumb-title\">Word Searching</p>\n              </NavLink>\n            </div>\n          </div>\n        </center>\n      </div>\n    );\n  }\n}\n","const CHARS = [\n  \"A\",\n  \"B\",\n  \"C\",\n  \"D\",\n  \"E\",\n  \"F\",\n  \"G\",\n  \"H\",\n  \"I\",\n  \"J\",\n  \"K\",\n  \"L\",\n  \"M\",\n  \"N\",\n  \"O\",\n  \"P\",\n  \"Q\",\n  \"R\",\n  \"S\",\n  \"T\",\n  \"U\",\n  \"V\",\n  \"W\",\n  \"X\",\n  \"Y\",\n  \"Z\",\n];\n\nexport default CHARS;\n","import React from \"react\";\n\nimport \"./Cell.css\";\n\nexport default class Cell extends React.Component {\n  render() {\n    const { row, col, val, found } = this.props;\n\n    const extraClass = found ? \"found-cell\" : \"default-cell\";\n\n    return (\n      <div id={`cell-${row}-${col}`} className={`ws-cell ${extraClass}`}>\n        {val}\n      </div>\n    );\n  }\n}\n","export function randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","export function wordDFS(grid = [], word, animations = []) {\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      const { row, col, val, visited } = grid[i][j];\n      animations.push([i, j, \"testing\", \"not-found\"]);\n      if (\n        val === word.charAt(0) &&\n        dfs(grid, row, col, 0, word, animations) &&\n        !visited\n      ) {\n        grid[i][j].visited = true;\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nfunction dfs(grid = [], i, j, count, word, animations = []) {\n  if (count === word.length) return true;\n\n  if (i >= 0 && i < grid.length && j >= 0 && j < grid[i].length) {\n    animations.push([i, j, \"not-found\", \"not-found\"]);\n  }\n\n  if (\n    i < 0 ||\n    i >= grid.length ||\n    j < 0 ||\n    j >= grid[i].length ||\n    grid[i][j].val !== word.charAt(count)\n  )\n    return false;\n  let temp = grid[i][j].val;\n  grid[i][j].val = \" \";\n\n  var found =\n    dfs(grid, i + 1, j, count + 1, word, animations) ||\n    dfs(grid, i - 1, j, count + 1, word, animations) ||\n    dfs(grid, i, j + 1, count + 1, word, animations) ||\n    dfs(grid, i, j - 1, count + 1, word, animations);\n\n  if (found === true) {\n    animations.push([i, j, \"not-found\", \"found\"]);\n  } else {\n    animations.push([i, j, \"not-found\", \"not-found\"]);\n  }\n  grid[i][j].val = temp;\n  return found;\n}\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst BackBar = () => (\n  <div className=\"bg-dark py-2\">\n    <NavLink to=\"/\">\n      <span className=\"text-light ml-3\">\n        <i className=\"fas fa-arrow-left\"></i> Back\n      </span>\n    </NavLink>\n  </div>\n);\n\nexport default BackBar;\n","import React from \"react\";\n\nconst ProblemStatement = () => (\n  <div className=\"mt-2 text-light\">\n    <br />\n    Given a 2D board and a word, find if the word exists in the grid.\n    <br />\n    <br />\n    The word can be constructed from letters of sequentially adjacent cell,\n    where \"adjacent\" cells are those horizontally or vertically neighboring. The\n    same letter cell may not be used more than once.\n    <br />\n    <br />\n    <b>Example:</b>\n    <br />\n    <br />\n    <pre className=\"text-light\">\n      <b>board</b> = [<br />\n      &nbsp;&nbsp;&nbsp;&nbsp;['A','B','C','E'],\n      <br />\n      &nbsp;&nbsp;&nbsp;&nbsp;['S','F','C','S'],\n      <br />\n      &nbsp;&nbsp;&nbsp;&nbsp;['A','D','E','E']\n      <br />\n      ]\n      <br />\n      <br />\n      Given word = \"<b>ABCCED</b>\", return <b>true</b> <br />\n      Given word = \"<b>SEE</b>\", return <b>true</b> <br />\n      Given word = \"<b>ABCB</b>\", return <b>false</b>\n    </pre>\n  </div>\n);\n\nexport default ProblemStatement;\n","import React from \"react\";\n\nimport CHARS from \"./wordSearch-utils/chars\";\nimport Cell from \"./Cell/Cell\";\nimport { randomIntFromInterval } from \"./../utils/randomIntFromInterval\";\n\nimport { wordDFS } from \"./algorithms/wordDFS\";\nimport BackBar from \"./../utils/backbar\";\nimport ProblemStatement from \"./wordSearch-utils/problemStatement\";\n\nconst BOARD_SIZE = 10;\n\nexport default class WordSearch extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      disabled: false,\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  clearBoard() {\n    for (let i = 0; i < BOARD_SIZE; i++) {\n      for (let j = 0; j < BOARD_SIZE; j++) {\n        let cell = document.getElementById(`cell-${i}-${j}`);\n        cell.className = \"ws-cell default-cell\";\n        console.log(cell);\n      }\n    }\n  }\n\n  newBoard() {\n    this.clearBoard();\n    this.resetArray();\n  }\n\n  resetArray() {\n    const gridBox = document.getElementById(\"ws-grid\");\n    gridBox.style.setProperty(\"--ws-grid-rows\", BOARD_SIZE);\n    gridBox.style.setProperty(\"--ws-grid-cols\", BOARD_SIZE);\n\n    const array = new Array(BOARD_SIZE);\n    for (let i = 0; i < BOARD_SIZE; i++) {\n      array[i] = new Array(BOARD_SIZE);\n      for (let j = 0; j < BOARD_SIZE; j++) {\n        array[i][j] = {\n          row: i,\n          col: j,\n          val: CHARS[randomIntFromInterval(0, CHARS.length - 1)],\n          found: false,\n          visited: false,\n        };\n      }\n    }\n\n    this.setState({ grid: array });\n  }\n\n  visualiseWordSearch() {\n    const word = document.getElementById(\"word\").value.toUpperCase();\n\n    if (!word) {\n      alert(\"Word must be provided\");\n      return;\n    }\n\n    this.setState({ disabled: true });\n\n    const animations = [];\n    const { grid } = this.state;\n    wordDFS(grid, word, animations);\n\n    const founds = animations.slice();\n    const highlightSection = [];\n    for (let k = 0; k < founds.length; k++) {\n      let i = founds[k][0],\n        j = founds[k][1],\n        found = founds[k][3];\n      if (found === \"found\") highlightSection.push([i, j]);\n    }\n\n    for (let i = 0; i < animations.length; i++) {\n      const [row, col, testing, found] = animations[i];\n      const cell = document.getElementById(`cell-${row}-${col}`);\n      setTimeout(() => {\n        if (testing === \"testing\") {\n          cell.classList = \"ws-cell testing\";\n        } else if (found === \"found\") {\n          cell.classList = \"ws-cell found-cell\";\n        } else {\n          cell.classList = \"ws-cell not-found-cell\";\n        }\n        cell.style.transition = \"500ms all\";\n\n        if (i === animations.length - 1) {\n          this.setState({ disabled: false });\n          for (let k = 0; k < highlightSection.length; k++) {\n            const [i, j] = highlightSection[k];\n            setTimeout(() => {\n              document\n                .getElementById(`cell-${i}-${j}`)\n                .classList.add(\"ws-popupBlocks\");\n            }, k * 50);\n          }\n        }\n      }, i * 500);\n    }\n  }\n\n  render() {\n    const { grid, disabled } = this.state;\n    return (\n      <div>\n        <BackBar />\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-sm-7 mt-1\">\n              <div className=\"ws-box rounded shadowB\">\n                <div className=\"ws-grid\" id=\"ws-grid\">\n                  {grid.map((ele) => {\n                    return ele.map((cell, idx) => {\n                      const { row, col, val, found, visited } = cell;\n                      return (\n                        <Cell\n                          key={`${row}-${col}`}\n                          row={row}\n                          col={col}\n                          val={val}\n                          visited={visited}\n                          found={found}\n                        />\n                      );\n                    });\n                  })}\n                </div>\n              </div>\n            </div>\n\n            <div className=\"col-sm-5 mt-2\">\n              <div className=\"input-group\">\n                <div className=\"input-group-prepend\">\n                  <span className=\"input-group-text\" id=\"basic-addon2\">\n                    Word\n                  </span>\n                </div>\n                <input\n                  type=\"text\"\n                  id=\"word\"\n                  className=\"form-control\"\n                  placeholder=\"type here...\"\n                />\n              </div>\n              <div\n                className=\"btn-group btn-block mt-2\"\n                role=\"group\"\n                aria-label=\"Basic example\"\n              >\n                <button\n                  onClick={() => this.clearBoard()}\n                  type=\"button\"\n                  disabled={disabled}\n                  className=\"btn btn-danger\"\n                >\n                  Reset\n                </button>\n                <button\n                  onClick={() => this.newBoard()}\n                  type=\"button\"\n                  disabled={disabled}\n                  className=\"btn btn-success\"\n                >\n                  New\n                </button>\n                <button\n                  onClick={() => this.visualiseWordSearch()}\n                  type=\"button\"\n                  disabled={disabled}\n                  className=\"btn btn-dark\"\n                >\n                  Search\n                </button>\n              </div>\n              <ProblemStatement />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nimport \"./Node.scss\";\n\nconst Node = ({\n  row,\n  col,\n  isFinish,\n  isStart,\n  isWall,\n  onNodeClick,\n  onNodeOver,\n  onNodeOut,\n}) => {\n  const extraClassName = isFinish\n    ? \"node-finish\"\n    : isStart\n    ? \"node-start\"\n    : isWall\n    ? \"node-wall\"\n    : \"\";\n\n  return (\n    <div\n      id={`node-${row}-${col}`}\n      className={`node ${extraClassName} `}\n      onClick={() => onNodeClick(row, col)}\n      onMouseOver={() => onNodeOver(row, col)}\n      onMouseOut={() => onNodeOut(row, col)}\n    ></div>\n  );\n};\n\nexport default Node;\n","export function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n\n    if (closestNode.isWall) continue;\n\n    if (closestNode.distance === Infinity)\n      return [visitedNodesInOrder, calculatePath(finishNode)];\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n\n    if (closestNode === finishNode)\n      return [visitedNodesInOrder, calculatePath(finishNode)];\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nexport function getAllNodes(grid = []) {\n  const nodes = [];\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      nodes.push(grid[i][j]);\n    }\n  }\n  return nodes;\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction calculatePath(finishNode) {\n  const shortestPathNodes = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    shortestPathNodes.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return shortestPathNodes;\n}\n","export function bfs(grid = [], startNode, finishNode) {\n  const queue = [];\n  const visitedNodesInOrder = [];\n\n  startNode.isVisited = true;\n  queue.push(startNode);\n\n  while (!!queue.length) {\n    let node = queue.shift();\n\n    if (finishNode === node)\n      return [visitedNodesInOrder, calculatePath(finishNode)];\n\n    if (node.isWall) continue;\n\n    const neighbors = getAllNeighbors(grid, node);\n\n    for (const neighbor of neighbors) {\n      neighbor.isVisited = true;\n      neighbor.previousNode = node;\n      visitedNodesInOrder.push(neighbor);\n      queue.push(neighbor);\n    }\n  }\n\n  return [visitedNodesInOrder, calculatePath(finishNode)];\n}\n\nfunction calculatePath(finishNode) {\n  const shortestPathNodes = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    shortestPathNodes.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return shortestPathNodes;\n}\n\nfunction getAllNeighbors(grid = [], node) {\n  const ROWS = grid.length;\n  const COLS = grid[0].length;\n\n  const { row, col } = node;\n  const neighbors = [];\n\n  if (\n    row + 1 >= 0 &&\n    row + 1 < ROWS &&\n    col >= 0 &&\n    col < COLS &&\n    !grid[row + 1][col].isVisited &&\n    !grid[row + 1][col].isWall\n  ) {\n    neighbors.push(grid[row + 1][col]);\n  }\n  if (\n    row - 1 >= 0 &&\n    row - 1 < ROWS &&\n    col >= 0 &&\n    col < COLS &&\n    !grid[row - 1][col].isWall &&\n    !grid[row - 1][col].isVisited\n  ) {\n    neighbors.push(grid[row - 1][col]);\n  }\n  if (\n    row >= 0 &&\n    row < ROWS &&\n    col - 1 >= 0 &&\n    col - 1 < COLS &&\n    !grid[row][col - 1].isWall &&\n    !grid[row][col - 1].isVisited\n  ) {\n    neighbors.push(grid[row][col - 1]);\n  }\n  if (\n    row >= 0 &&\n    row < ROWS &&\n    col + 1 >= 0 &&\n    col + 1 < COLS &&\n    !grid[row][col + 1].isWall &&\n    !grid[row][col + 1].isVisited\n  ) {\n    neighbors.push(grid[row][col + 1]);\n  }\n\n  return neighbors;\n}\n","export function dfs(grid = [], startNode, finishNode) {\n  const stack = [];\n  const visitedNodesInOrder = [];\n\n  startNode.isVisited = true;\n  stack.push(startNode);\n\n  while (!!stack.length) {\n    let node = stack.pop();\n\n    if (finishNode === node)\n      return [visitedNodesInOrder, calculatePath(finishNode)];\n\n    if (node.isWall) continue;\n\n    const neighbors = getAllNeighbors(grid, node);\n\n    for (const neighbor of neighbors) {\n      neighbor.isVisited = true;\n      neighbor.previousNode = node;\n      visitedNodesInOrder.push(neighbor);\n      stack.push(neighbor);\n    }\n  }\n\n  return [visitedNodesInOrder, calculatePath(finishNode)];\n}\n\nfunction calculatePath(finishNode) {\n  const shortestPathNodes = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    shortestPathNodes.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return shortestPathNodes;\n}\n\nfunction getAllNeighbors(grid = [], node) {\n  const ROWS = grid.length;\n  const COLS = grid[0].length;\n\n  const { row, col } = node;\n  const neighbors = [];\n\n  if (\n    row + 1 >= 0 &&\n    row + 1 < ROWS &&\n    col >= 0 &&\n    col < COLS &&\n    !grid[row + 1][col].isVisited &&\n    !grid[row + 1][col].isWall\n  ) {\n    neighbors.push(grid[row + 1][col]);\n  }\n  if (\n    row - 1 >= 0 &&\n    row - 1 < ROWS &&\n    col >= 0 &&\n    col < COLS &&\n    !grid[row - 1][col].isWall &&\n    !grid[row - 1][col].isVisited\n  ) {\n    neighbors.push(grid[row - 1][col]);\n  }\n  if (\n    row >= 0 &&\n    row < ROWS &&\n    col - 1 >= 0 &&\n    col - 1 < COLS &&\n    !grid[row][col - 1].isWall &&\n    !grid[row][col - 1].isVisited\n  ) {\n    neighbors.push(grid[row][col - 1]);\n  }\n  if (\n    row >= 0 &&\n    row < ROWS &&\n    col + 1 >= 0 &&\n    col + 1 < COLS &&\n    !grid[row][col + 1].isWall &&\n    !grid[row][col + 1].isVisited\n  ) {\n    neighbors.push(grid[row][col + 1]);\n  }\n\n  return neighbors;\n}\n","import generate from \"@indutny/maze\";\n\nexport function generateMaze(grid = []) {\n  const ROW = grid.length,\n    COL = grid[0].length;\n\n  const maze = generate({ width: ROW, height: COL });\n\n  for (let i = 0; i < ROW; i++) {\n    for (let j = 0; j < COL; j++) {\n      const { row, col } = grid[i][j];\n      if (grid[i][j].isStart || grid[i][j].isFinish) {\n        if (row > 0) maze[row - 1][col] = 0;\n        if (row < ROW - 1) maze[row + 1][col] = 0;\n        if (col > 0) maze[row][col - 1] = 0;\n        if (col < COL - 1) maze[row][col + 1] = 0;\n      }\n    }\n  }\n\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      if (!grid[i][j].isStart && !grid[i][j].isFinish && maze[i][j] === 1) {\n        grid[i][j].isWall = true;\n      }\n    }\n  }\n\n  return grid;\n}\n","function getNodeNeighbors(row, col, ROWS, COLS) {\n  const nodeArray = [];\n  for (let i = 0, j = 0; i < ROWS || j < COLS; i++, j++) {\n    nodeArray.push([row, i]);\n    nodeArray.push([j, col]);\n  }\n  return nodeArray;\n}\n\nexport function highlightGrid(row, col, ROWS, COLS) {\n  const nodeArray = getNodeNeighbors(row, col, ROWS, COLS);\n  for (const nodeVal of nodeArray) {\n    const [nRow, nCol] = nodeVal;\n    const node = document.getElementById(`node-${nRow}-${nCol}`);\n\n    if (nRow === parseInt(ROWS / 2)) {\n      node.classList.add(\"plus-center\");\n    } else {\n      node.classList.add(\"plus\");\n    }\n\n    if (nCol === parseInt(COLS / 2)) {\n      node.classList.add(\"plus-center\");\n    } else {\n      node.classList.add(\"plus\");\n    }\n  }\n}\n\nexport function unHighlightGrid(row, col, ROWS, COLS) {\n  const nodeArray = getNodeNeighbors(row, col, ROWS, COLS);\n  for (const nodeVal of nodeArray) {\n    const [nRow, nCol] = nodeVal;\n    const node = document.getElementById(`node-${nRow}-${nCol}`);\n\n    if (nRow === parseInt(ROWS / 2)) {\n      node.classList.remove(\"plus-center\");\n    } else {\n      node.classList.remove(\"plus\");\n    }\n\n    if (nCol === parseInt(COLS / 2)) {\n      node.classList.remove(\"plus-center\");\n    } else {\n      node.classList.remove(\"plus\");\n    }\n  }\n}\n\nexport function highlightGridDiagonals(nodes = [], ROWS, COLS) {\n  for (let i = 0; i < ROWS; i++) {\n    for (let j = 0; j < COLS; j++) {\n      const { row, col } = nodes[i][j];\n      if (row === col) {\n        document\n          .getElementById(`node-${row}-${col}`)\n          .classList.add(\"plus-center\");\n      }\n    }\n  }\n  for (let i = ROWS - 1; i >= 0; i--) {\n    for (let j = 0; j < COLS; j++) {\n      if (i + j === parseInt((ROWS - 1 + COLS) / 2)) {\n        document.getElementById(`node-${i}-${j}`).classList.add(\"plus-center\");\n      }\n    }\n  }\n}\n\nexport function unHighlightGridDiagonals(nodes = [], ROWS, COLS) {\n  for (let i = 0; i < ROWS; i++) {\n    for (let j = 0; j < COLS; j++) {\n      const { row, col } = nodes[i][j];\n      if (row === col) {\n        document\n          .getElementById(`node-${row}-${col}`)\n          .classList.remove(\"plus-center\");\n      }\n    }\n  }\n  for (let i = ROWS - 1; i >= 0; i--) {\n    for (let j = 0; j < COLS; j++) {\n      if (i + j === parseInt((ROWS - 1 + COLS) / 2)) {\n        document\n          .getElementById(`node-${i}-${j}`)\n          .classList.remove(\"plus-center\");\n      }\n    }\n  }\n}\n","import React from \"react\";\n\nconst borderStyles = { border: \"1px solid #f0f0f0\" };\n\nconst Legend = () => (\n  <div id=\"legend\" className=\"bg-dark shadowT rounded\">\n    <div id=\"legendRow\" className=\"row p-2\">\n      <div className=\"col-6\">\n        <div className=\"row\">\n          <div className=\"col-2\">\n            <div\n              style={borderStyles}\n              className=\"legend mt-1 legend-start\"\n            ></div>\n          </div>\n          <div className=\"col-10 nmt-5\">\n            <div className=\"text-light font-weight-bold legend-label\">\n              Source\n            </div>\n          </div>\n\n          <div className=\"col-2\">\n            <div style={borderStyles} className=\"legend mt-1 legend-wall\"></div>\n          </div>\n          <div className=\"col-10 nmt-5\">\n            <div className=\"text-light font-weight-bold legend-label\">Wall</div>\n          </div>\n\n          <div className=\"col-2\">\n            <div\n              style={borderStyles}\n              className=\"legend mt-1 legend-visited\"\n            ></div>\n          </div>\n          <div className=\"col-10 nmt-5\">\n            <div className=\"text-light font-weight-bold legend-label\">\n              Visited\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"col-6\">\n        <div className=\"row\">\n          <div className=\"col-2\">\n            <div\n              style={borderStyles}\n              className=\"legend mt-1 legend-finish\"\n            ></div>\n          </div>\n          <div className=\"col-10 nmt-5\">\n            <div className=\"text-light font-weight-bold legend-label\">\n              Destination\n            </div>\n          </div>\n\n          <div className=\"col-2\">\n            <div style={borderStyles} className=\"legend mt-1 legend-path\"></div>\n          </div>\n          <div className=\"col-10 nmt-5\">\n            <div className=\"text-light font-weight-bold legend-label\">Node</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nexport default Legend;\n","import React from \"react\";\n\n//  Importing Node Component to display Node on Grid\nimport Node from \"./Node/Node\";\n\nimport { Button, Form, InputGroup, Container, Row, Col } from \"react-bootstrap\";\n\n//  Pathfinder Algorithms\nimport { dijkstra } from \"./algorithms/dijkstra\";\nimport { bfs } from \"./algorithms/breadthFirstSearch\";\nimport { dfs } from \"./algorithms/depthFirstSearch\";\n//  Maze Generation Algorithm\nimport { generateMaze } from \"./utils/generateMaze\";\n\nimport BackBar from \"./../utils/backbar\";\n\n//  Highlight Board Functions\nimport {\n  highlightGrid,\n  unHighlightGrid,\n  highlightGridDiagonals,\n  unHighlightGridDiagonals,\n} from \"./utils/highlightMazeNodes\";\n\n//  Legend Component\nimport Legend from \"./utils/legend\";\n\n//  Complexity table\nimport ComplexityTable from \"./utils/complexityTable\";\n\n//  Stylesheets\nimport \"./PathFinder.scss\";\n\n//  Constants to toggle Start/Finish/Wall on Grid\nconst START_NODE_STATE = 1;\nconst END_NODE_STATE = 2;\nconst WALL_NODE_STATE = 3;\n\nconst START = \"START\";\nconst FINISH = \"FINISH\";\n\n// Speed Factor\nvar SPEED;\n\n// Screen Resolution\nvar SCREEN_WIDTH = window.screen.width;\nvar ROWS, COLS;\n\n// Adjusting the Grid according to Screen Width\n// For better responsiveness and interactivity.\nif (SCREEN_WIDTH > 1440 && SCREEN_WIDTH <= 2560) {\n  // TVs and Large Screen Laptops\n  ROWS = 61;\n  COLS = 61;\n  SPEED = 10;\n} else if (SCREEN_WIDTH >= 768 && SCREEN_WIDTH <= 1440) {\n  // Laptops & Tablets\n  ROWS = 53;\n  COLS = 53;\n  SPEED = 15;\n} else if (SCREEN_WIDTH > 425 && SCREEN_WIDTH <= 767) {\n  // IPads and Smaller Laptops\n  ROWS = 47;\n  COLS = 47;\n  SPEED = 20;\n} else if (SCREEN_WIDTH >= 320 && SCREEN_WIDTH <= 425) {\n  // Mobile Devices\n  ROWS = 37;\n  COLS = 37;\n  SPEED = 25;\n} else if (SCREEN_WIDTH >= 120 && SCREEN_WIDTH <= 319) {\n  // Mobile Devices with Smaller Screens\n  ROWS = 21;\n  COLS = 21;\n  SPEED = 25;\n} else {\n  // Default Case\n  ROWS = 41;\n  COLS = 41;\n  SPEED = 18;\n}\n\nexport default class PathFinder extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      modifyingNodeState: 0,\n      START_NODE_ROW: 2,\n      START_NODE_COL: 2,\n      FINISH_NODE_ROW: ROWS - 3,\n      FINISH_NODE_COL: COLS - 3,\n\n      disableMazesButton: false,\n      disableNodesButton: false,\n      disableClearMazeButton: false,\n      disableClearPathButton: false,\n      disableAlgoDropdown: false,\n      disablePerformButton: false,\n\n      highlightMazeNodes: true,\n      isGridDiagonalsHighlighted: false,\n      speed: SPEED,\n    };\n  }\n\n  componentDidMount() {\n    this.setUpGrid();\n    this.setState({\n      disableClearMazeButton: true,\n      disableClearPathButton: true,\n    });\n  }\n\n  setUpGrid() {\n    const gridBox = document.getElementById(\"grid\");\n    gridBox.style.setProperty(\"--p-grid-rows\", ROWS);\n    gridBox.style.setProperty(\"--p-grid-cols\", COLS);\n\n    const grid = new Array(COLS);\n\n    for (let i = 0; i < ROWS; i++) {\n      grid[i] = new Array(ROWS);\n      for (let j = 0; j < COLS; j++) {\n        grid[i][j] = this.createNode(i, j);\n      }\n    }\n\n    this.setState({ grid });\n  }\n\n  createNode(row, col) {\n    const { START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL } =\n      this.state;\n    return {\n      row,\n      col,\n      isStart: row === START_NODE_ROW && col === START_NODE_COL,\n      isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n      distance: Infinity,\n      isVisited: false,\n      isWall: false,\n      previousNode: null,\n      cost: {\n        F: Infinity,\n        G: Infinity,\n        H: Infinity,\n      },\n    };\n  }\n\n  clearBoard() {\n    this.setUpGrid();\n    const grid = this.state.grid;\n    for (let i = 0; i < grid.length; i++) {\n      for (let j = 0; j < grid[0].length; j++) {\n        const node = grid[i][j];\n        document\n          .getElementById(`node-${node.row}-${node.col}`)\n          .classList.remove(\"node-visited\");\n        document\n          .getElementById(`node-${node.row}-${node.col}`)\n          .classList.remove(\"node-shortest-path\");\n      }\n    }\n    this.setState({\n      disableMazesButton: false,\n      disableNodesButton: false,\n      disableClearPathButton: true,\n      disableClearMazeButton: true,\n      disableAlgoDropdown: false,\n      disablePerformButton: false,\n      highlightMazeNodes: true,\n    });\n  }\n\n  clearPath() {\n    const { grid } = this.state;\n    const temp = grid.slice();\n    for (let i = 0; i < temp.length; i++) {\n      for (let j = 0; j < temp[i].length; j++) {\n        let node = temp[i][j];\n        if (node.isVisited) {\n          node.isVisited = false;\n          document\n            .getElementById(`node-${node.row}-${node.col}`)\n            .classList.remove(\"node-visited\");\n          document\n            .getElementById(`node-${node.row}-${node.col}`)\n            .classList.remove(\"node-shortest-path\");\n        }\n      }\n    }\n    this.setState({\n      disableMazesButton: true,\n      disableNodesButton: true,\n      disableAlgoDropdown: false,\n      disablePerformButton: false,\n      highlightMazeNodes: true,\n    });\n  }\n\n  highlightNodes(row, col) {\n    if (this.state.highlightMazeNodes) highlightGrid(row, col, ROWS, COLS);\n  }\n\n  unHighlightNodes(row, col) {\n    if (this.state.highlightMazeNodes) unHighlightGrid(row, col, ROWS, COLS);\n  }\n\n  // change `isGridDiagonalsHighlighted` to true in state\n  // to highlight diagonals on board\n\n  highlightDiagonals() {\n    if (this.state.isGridDiagonalsHighlighted)\n      highlightGridDiagonals(this.state.grid, ROWS, COLS);\n  }\n\n  unHighlightDiagonals() {\n    if (this.state.isGridDiagonalsHighlighted)\n      unHighlightGridDiagonals(this.state.grid, ROWS, COLS);\n  }\n\n  handleNodeOperations(row, col, NODE_STATE) {\n    const {\n      START_NODE_ROW,\n      START_NODE_COL,\n      FINISH_NODE_ROW,\n      FINISH_NODE_COL,\n      grid,\n    } = this.state;\n    switch (NODE_STATE) {\n      case 1:\n        if (\n          this.toggleStartOrFinish(\n            grid,\n            row,\n            col,\n            START_NODE_ROW,\n            START_NODE_COL,\n            START\n          )\n        ) {\n          this.setState({\n            START_NODE_ROW: row,\n            START_NODE_COL: col,\n          });\n        }\n        break;\n      case 2:\n        if (\n          this.toggleStartOrFinish(\n            grid,\n            row,\n            col,\n            FINISH_NODE_ROW,\n            FINISH_NODE_COL,\n            FINISH\n          )\n        ) {\n          this.setState({\n            FINISH_NODE_ROW: row,\n            FINISH_NODE_COL: col,\n          });\n        }\n        break;\n      case 3:\n        this.toggleWall(grid, row, col);\n        break;\n      default:\n        break;\n    }\n  }\n\n  toggleStartOrFinish(grid = [], row, col, NODE_ROW, NODE_COL, nodeType) {\n    const newGrid = grid.slice();\n\n    const currentNode = newGrid[NODE_ROW][NODE_COL];\n    const newNode = newGrid[row][col];\n\n    if (nodeType === \"START\") {\n      if (newNode.isWall || newNode.isFinish) {\n        return false;\n      } else {\n        currentNode.isStart = false;\n        newNode.isStart = true;\n        this.setState({\n          grid: newGrid,\n        });\n        return true;\n      }\n    } else if (nodeType === \"FINISH\") {\n      if (newNode.isWall || newNode.isStart) {\n        return false;\n      } else {\n        currentNode.isFinish = false;\n        newNode.isFinish = true;\n        this.setState({\n          grid: newGrid,\n        });\n        return true;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  toggleWall(grid, row, col) {\n    const newGrid = grid.slice();\n    const currentNode = newGrid[row][col];\n    if (!currentNode.isFinish && !currentNode.isStart) {\n      currentNode.isWall = !currentNode.isWall;\n      this.setState({ grid: newGrid });\n    }\n  }\n\n  generateMaze(grid = []) {\n    this.setState({\n      disableMazesButton: true,\n      disableClearPathButton: true,\n      disableClearMazeButton: false,\n    });\n    const mazeGrid = generateMaze(grid);\n    this.setState({ grid: mazeGrid });\n  }\n\n  modifyNodeState(STATE) {\n    this.setState({ modifyingNodeState: STATE });\n  }\n\n  selectAlgorithm() {\n    const algorithm = parseInt(\n      document.getElementById(\"pathFindingAlgoDropDown\").value\n    );\n    if (algorithm !== 0) this.visualiseAlgorithms(algorithm);\n    else {\n      alert(\"Select an Algorithm first!\");\n      return;\n    }\n  }\n\n  visualiseAlgorithms(algorithm) {\n    this.setState({\n      disableNodesButton: true,\n      disableMazesButton: true,\n      disableClearMazeButton: true,\n      disableClearPathButton: true,\n      disableAlgoDropdown: true,\n      disablePerformButton: true,\n      modifyingNodeState: 0,\n    });\n    const {\n      grid,\n      START_NODE_COL,\n      START_NODE_ROW,\n      FINISH_NODE_COL,\n      FINISH_NODE_ROW,\n    } = this.state;\n\n    const STARTNODE = grid[START_NODE_ROW][START_NODE_COL];\n    const FINISHNODE = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n\n    var visitedNodesInOrder, nodesInShortestPathOrder;\n\n    switch (algorithm) {\n      case 0:\n        alert(\"Select an algorithm first!\");\n        this.setState({\n          disableMazesButton: false,\n          disableNodesButton: false,\n        });\n        return;\n      case 1:\n        [visitedNodesInOrder, nodesInShortestPathOrder] = dijkstra(\n          grid,\n          STARTNODE,\n          FINISHNODE\n        );\n        break;\n      case 2:\n        [visitedNodesInOrder, nodesInShortestPathOrder] = bfs(\n          grid,\n          STARTNODE,\n          FINISHNODE\n        );\n        break;\n      case 3:\n        [visitedNodesInOrder, nodesInShortestPathOrder] = dfs(\n          grid,\n          STARTNODE,\n          FINISHNODE\n        );\n        break;\n      default:\n        return;\n    }\n    this.animatePath(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  animatePath(visitedNodesInOrder = [], nodesInShortestPathOrder = []) {\n    this.setState({ disableNodesButton: true, highlightMazeNodes: false });\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, SPEED * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        if (!node.isStart && !node.isFinish && !node.isWall) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-visited\";\n        }\n      }, SPEED * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder = []) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        if (!node.isStart && !node.isFinish && !node.isWall) {\n          document.getElementById(`node-${node.row}-${node.col}`).classList =\n            \"node node-shortest-path\";\n        }\n        if (node.isFinish) {\n          setTimeout(() => {\n            this.setState({\n              disableClearMazeButton: false,\n              disableClearPathButton: false,\n            });\n          }, 1000);\n        }\n      }, SPEED * 1.4 * i);\n    }\n  }\n\n  render() {\n    const {\n      grid,\n      modifyingNodeState,\n      disableMazesButton,\n      disableNodesButton,\n      disableClearMazeButton,\n      disableClearPathButton,\n      disableAlgoDropdown,\n      disablePerformButton,\n    } = this.state;\n    return (\n      <div>\n        <BackBar />\n        <Container fluid>\n          <Row>\n            <Col sm={1} />\n            <Col sm={7}>\n              <div className=\"mt-2\">\n                <div className=\"box_p rounded shadowT\">\n                  <div\n                    onMouseOut={() => this.unHighlightDiagonals()}\n                    onMouseOver={() => this.highlightDiagonals()}\n                    id=\"grid\"\n                    className=\"grid\"\n                  >\n                    {grid.map((node, idx) => {\n                      return node.map((cell, idx) => {\n                        const { row, col, isStart, isFinish, isWall } = cell;\n                        return (\n                          <Node\n                            key={`${row}-${col}`}\n                            col={col}\n                            isFinish={isFinish}\n                            isStart={isStart}\n                            isWall={isWall}\n                            row={row}\n                            onNodeClick={(row, col) =>\n                              this.handleNodeOperations(\n                                row,\n                                col,\n                                modifyingNodeState\n                              )\n                            }\n                            onNodeOver={(row, col) =>\n                              this.highlightNodes(row, col)\n                            }\n                            onNodeOut={(row, col) =>\n                              this.unHighlightNodes(row, col)\n                            }\n                          />\n                        );\n                      });\n                    })}\n                  </div>\n                </div>\n              </div>\n            </Col>\n            <Col sm={3} className=\"mt-2\">\n              <div className=\"btn-group btn-block\">\n                <Button\n                  disabled={disableNodesButton}\n                  variant=\"success\"\n                  onClick={() => this.modifyNodeState(START_NODE_STATE)}\n                >\n                  Source\n                </Button>\n                <Button\n                  disabled={disableNodesButton}\n                  variant=\"danger\"\n                  onClick={() => this.modifyNodeState(END_NODE_STATE)}\n                >\n                  Destination\n                </Button>\n                <Button\n                  disabled={disableNodesButton}\n                  variant=\"dark\"\n                  onClick={() => this.modifyNodeState(WALL_NODE_STATE)}\n                >\n                  Toggle Wall\n                </Button>\n              </div>\n              <div className=\"btn-group btn-block mt-2\">\n                <Button\n                  disabled={disableMazesButton}\n                  variant=\"secondary\"\n                  onClick={() => this.generateMaze(grid)}\n                >\n                  Generate Maze\n                </Button>\n                <Button\n                  disabled={disableClearMazeButton}\n                  variant=\"danger\"\n                  onClick={() => this.clearBoard()}\n                >\n                  Clear Maze\n                </Button>\n                <Button\n                  disabled={disableClearPathButton}\n                  variant=\"primary\"\n                  onClick={() => this.clearPath()}\n                >\n                  Clear Path\n                </Button>\n              </div>\n              <div className=\"btn-group btn-block mt-2\">\n                <InputGroup>\n                  <Form.Control\n                    disabled={disableAlgoDropdown}\n                    id=\"pathFindingAlgoDropDown\"\n                    defaultValue=\"0\"\n                    as=\"select\"\n                  >\n                    <option disabled value=\"0\">\n                      Select Algorithm\n                    </option>\n                    <option value=\"1\">Dijkstras</option>\n                    <option value=\"2\">Breadth First Search</option>\n                    <option value=\"3\">Depth First Search</option>\n                  </Form.Control>\n                  <InputGroup.Append>\n                    <Button\n                      onClick={() => this.selectAlgorithm()}\n                      disabled={disablePerformButton}\n                      variant=\"success\"\n                    >\n                      Perform Search\n                    </Button>\n                  </InputGroup.Append>\n                </InputGroup>\n              </div>\n              <Legend />\n              <ComplexityTable />\n            </Col>\n            <Col sm={1} />\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nconst ComplexityTable = () => (\n  <div id=\"complexityTableP\">\n    <table className=\"table-bordered table table-striped text-center mt-2  table-dark\">\n      <thead>\n        <tr>\n          <th>Algorithm</th>\n          <th>Time</th>\n          <th>Space</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td className=\"text-warning\">Dijkstras</td>\n          <td>O(E + V&times;LogV)</td>\n          <td>O(V)</td>\n        </tr>\n        <tr>\n          <td className=\"text-warning\">BFS</td>\n          <td>\n            O(V + E)\n          </td>\n          <td>\n            O(V)\n          </td>\n        </tr>\n        <tr>\n          <td className=\"text-warning\">DFS</td>\n          <td>\n            O(V + E)\n          </td>\n          <td>\n            O(V)\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n);\n\nexport default ComplexityTable;\n","import React from \"react\";\n\nconst ComplexityTable = () => (\n  <div id=\"complexityTable\">\n    <table className=\"table-bordered table table-striped text-center rounded-b mt-2 shadowT table-dark\">\n      <thead>\n        <tr>\n          <th>Algorithm</th>\n          <th colSpan=\"2\">Time</th>\n          <th>Space</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>Case: </td>\n          <td className=\"text-success table-success\">Best</td>\n          <td className=\"text-danger table-danger\">Worst</td>\n          <td></td>\n        </tr>\n        <tr>\n          <td className=\"text-warning\">Heap Sort</td>\n          <td>N&times;Log N</td>\n          <td>N&times;Log N</td>\n          <td>1</td>\n        </tr>\n        <tr>\n          <td className=\"text-warning\">Merge Sort</td>\n          <td>N&times;Log N</td>\n          <td>N&times;Log N</td>\n          <td>N</td>\n        </tr>\n        <tr>\n          <td className=\"text-warning\">Quick Sort</td>\n          <td>N&times;Log N</td>\n          <td>\n            N<sup>2</sup>\n          </td>\n          <td>Log N</td>\n        </tr>\n        <tr>\n          <td className=\"text-warning\">Bubble Sort</td>\n          <td>N</td>\n          <td>\n            N<sup>2</sup>\n          </td>\n          <td>1</td>\n        </tr>\n        <tr>\n          <td className=\"text-warning\">Insertion Sort</td>\n          <td>N</td>\n          <td>\n            N<sup>2</sup>\n          </td>\n          <td>1</td>\n        </tr>\n        <tr>\n          <td className=\"text-warning\">Selection Sort</td>\n          <td>\n            N<sup>2</sup>\n          </td>\n          <td>\n            N<sup>2</sup>\n          </td>\n          <td>1</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n);\n\nexport default ComplexityTable;\n","export function swap(i, j, arr = []) {\n  let temp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = temp;\n}\n","import { swap } from \"./swap\";\n\nfunction quickSortHelper(array = [], left, right, animations = []) {\n  let pivot = array[Math.floor((right + left) / 2)],\n    i = left,\n    j = right;\n  while (i <= j) {\n    while (array[i] < pivot) i++;\n\n    while (array[j] > pivot) j--;\n\n    if (i <= j) {\n      swap(i, j, array);\n      animations.push([i, j, array[i++], array[j--]]);\n    }\n  }\n  return i;\n}\n\nexport function getQuickSortAnimations(\n  items = [],\n  left,\n  right,\n  animations = []\n) {\n  let index;\n  if (items.length > 1) {\n    index = quickSortHelper(items, left, right, animations);\n    if (left < index - 1) {\n      getQuickSortAnimations(items, left, index - 1, animations);\n    }\n    if (index < right) {\n      getQuickSortAnimations(items, index, right, animations);\n    }\n  }\n  return animations;\n}\n","function mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    animations.push([i, j]);\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    animations.push([i, i]);\n    animations.push([i, i]);\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    animations.push([j, j]);\n    animations.push([j, j]);\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\nexport function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n","import { swap } from \"./swap\";\n\nfunction buildMaxHeap(array = [], animations = []) {\n  let i;\n  i = array.length / 2 - 1;\n  i = Math.floor(i);\n  while (i >= 0) {\n    heapify(array, i, array.length, animations);\n    i -= 1;\n  }\n}\n\nfunction heapify(heap = [], i, max, animations = []) {\n  let index, leftChild, righChild;\n\n  while (i < max) {\n    index = i;\n    leftChild = 2 * i + 1;\n    righChild = leftChild + 1;\n\n    if (leftChild < max && heap[leftChild] > heap[index]) index = leftChild;\n\n    if (righChild < max && heap[righChild] > heap[index]) index = righChild;\n\n    if (index === i) return;\n\n    swap(i, index, heap);\n    animations.push([i, index, heap[i], heap[index]]);\n    i = index;\n  }\n}\n\nexport function getHeapSortAnimations(array = [], animations = []) {\n  buildMaxHeap(array, animations);\n  let lastElement = array.length - 1;\n  while (lastElement > 0) {\n    swap(0, lastElement, array);\n    animations.push([0, lastElement, array[0], array[lastElement]]);\n    heapify(array, 0, lastElement, animations);\n    lastElement -= 1;\n  }\n}\n","const cellColors = [\n  [\n    \"#040C12\",\n    \"#081925\",\n    \"#0C2637\",\n    \"#10334A\",\n    \"#14405C\",\n    \"#184C6F\",\n    \"#1C5981\",\n    \"#206694\",\n    \"#2473A6\",\n    \"#2980B9\",\n    \"#3E8CC0\",\n    \"#5399C7\",\n    \"#69A6CE\",\n    \"#7EB2D5\",\n    \"#94BFDC\",\n    \"#A9CCE3\",\n    \"#BED8EA\",\n    \"#D4E5F1\",\n    \"#E9F2F8\",\n  ],\n  [\n    \"#180308\",\n    \"#300610\",\n    \"#480918\",\n    \"#600C21\",\n    \"#780F29\",\n    \"#901231\",\n    \"#A8153A\",\n    \"#C01842\",\n    \"#D81B4A\",\n    \"#F01F53\",\n    \"#F13564\",\n    \"#F34B75\",\n    \"#F46286\",\n    \"#F67897\",\n    \"#F78FA9\",\n    \"#F9A5BA\",\n    \"#FABBCB\",\n    \"#FCD2DC\",\n    \"#FDE8ED\",\n  ],\n  [\n    \"#180C03\",\n    \"#301906\",\n    \"#482609\",\n    \"#60330C\",\n    \"#78400F\",\n    \"#904D12\",\n    \"#A85A15\",\n    \"#C06718\",\n    \"#D8741B\",\n    \"#F0811F\",\n    \"#F18D35\",\n    \"#F39A4B\",\n    \"#F4A662\",\n    \"#F6B378\",\n    \"#F7C08F\",\n    \"#F9CCA5\",\n    \"#FAD9BB\",\n    \"#FCE5D2\",\n    \"#FDF2E8\",\n  ],\n  [\n    \"#0D0118\",\n    \"#1A0231\",\n    \"#27034A\",\n    \"#340463\",\n    \"#41067C\",\n    \"#4E0795\",\n    \"#5B08AE\",\n    \"#6809C7\",\n    \"#750AE0\",\n    \"#820CF9\",\n    \"#8E24F9\",\n    \"#9B3CFA\",\n    \"#A754FA\",\n    \"#B46DFB\",\n    \"#C085FC\",\n    \"#CD9DFC\",\n    \"#D9B6FD\",\n    \"#E6CEFD\",\n    \"#F2E6FE\",\n  ],\n];\n\nexport default cellColors;\n","import React from \"react\";\n\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\n\nimport { randomIntFromInterval } from \"../utils/randomIntFromInterval\";\nimport ComplexityTable from \"./complexityTable\";\n\n//  Sorting Algorithms\nimport { getBubbleSortAnimations } from \"./sortingAlgorithms/bubbleSort\";\nimport { getInsertionSortAnimations } from \"./sortingAlgorithms/insertionSort\";\nimport { getSelectionSortAnimations } from \"./sortingAlgorithms/selectionSort\";\nimport { getQuickSortAnimations } from \"./sortingAlgorithms/quickSort\";\nimport { getMergeSortAnimations } from \"./sortingAlgorithms/mergeSort\";\nimport { getHeapSortAnimations } from \"./sortingAlgorithms/heapSort\";\n\nimport cellColors from \"./cellColors\";\n\n// Stylesheets\nimport \"./sortingVisualiser.css\";\n\nimport BackBar from \"./../utils/backbar\";\n\nvar SELECTED = randomIntFromInterval(0, cellColors.length - 1);\nconst color = cellColors[SELECTED].reverse();\n\nconst SIZE_OF_BOARD = 25; // Size of Board -> N x N Size of 1D Array\nvar ANIMATION_SPEED = 0.5; // Greater Value -> Slower Animation\nconst CELL_CORNER_BORDER_RADIUS = 3;\n\nexport default class SortingVisualiser extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      disabled: false,\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < SIZE_OF_BOARD * SIZE_OF_BOARD; i++) {\n      let val = randomIntFromInterval(0, color.length - 1);\n      array.push(val);\n    }\n    this.setState({ array });\n    this.drawBoard(array);\n  }\n\n  drawBoard(arrayBoard = []) {\n    document.getElementById(\"sortingBoard\").innerHTML = \"\";\n    // creating the board\n    const container = document.getElementById(\"sortingBoard\");\n    // Adding Rows and Columns to the board\n    container.style.setProperty(\"--grid-rows\", SIZE_OF_BOARD);\n    container.style.setProperty(\"--grid-cols\", SIZE_OF_BOARD);\n    // Adding cells to the board\n    for (let j = 0; j < arrayBoard.length; j++) {\n      let cell = document.createElement(\"div\");\n      container.appendChild(cell).className = \"grid-item\";\n      let cellStyle = cell.style;\n      cellStyle.backgroundColor = color[arrayBoard[j]];\n\n      // styling the corners\n      if (j === 0) {\n        cellStyle.borderTopLeftRadius = `${CELL_CORNER_BORDER_RADIUS}px`;\n      } else if (j === SIZE_OF_BOARD - 1) {\n        cellStyle.borderTopRightRadius = `${CELL_CORNER_BORDER_RADIUS}px`;\n      } else if (j === SIZE_OF_BOARD * SIZE_OF_BOARD - 1) {\n        cellStyle.borderBottomRightRadius = `${CELL_CORNER_BORDER_RADIUS}px`;\n      } else if (j === SIZE_OF_BOARD * (SIZE_OF_BOARD - 1)) {\n        cellStyle.borderBottomLeftRadius = `${CELL_CORNER_BORDER_RADIUS}px`;\n      }\n    }\n  }\n\n  selectAlgorithm() {\n    let selectedValue = parseInt(\n      document.getElementById(\"sortingAlgoDropDown\").value\n    );\n    switch (selectedValue) {\n      case 0:\n        alert(\"Select An Algorithm First!\");\n        break;\n      case 1:\n        this.bubbleSort();\n        break;\n      case 2:\n        this.selectionSort();\n        break;\n      case 3:\n        this.insertionSort();\n        break;\n      case 4:\n        this.quickSort();\n        break;\n      case 5:\n        this.heapSort();\n        break;\n      case 6:\n        this.mergeSort();\n        break;\n      default:\n        break;\n    }\n  }\n\n  visualiseAnimations(animations = [], speedFactor) {\n    this.setState({ disabled: true });\n    setTimeout(() => {\n      const arrayBlocks = document.getElementsByClassName(\"grid-item\");\n      let count = 0;\n      for (let i = 0; i < animations.length; i++) {\n        const [idxOne, idxTwo, elemOne, elemTwo] = animations[i];\n        const blockOne = arrayBlocks[idxOne];\n        const blockTwo = arrayBlocks[idxTwo];\n        const blockOneStyle = blockOne.style;\n        const blockTwoStyle = blockTwo.style;\n\n        setTimeout(() => {\n          blockOneStyle.backgroundColor = color[elemOne];\n          blockTwoStyle.backgroundColor = color[elemTwo];\n\n          blockOneStyle.transition = \"150ms all\";\n          blockTwoStyle.transition = \"150ms all\";\n        }, ANIMATION_SPEED * speedFactor * (i + 1));\n        count++;\n      }\n\n      setTimeout(() => {\n        for (let i = 0; i < arrayBlocks.length; i++) {\n          setTimeout(() => {\n            arrayBlocks[i].classList.add(\"popupBlocks\");\n          }, ANIMATION_SPEED * i);\n        }\n        this.setState({ disabled: false });\n      }, ANIMATION_SPEED * speedFactor * (count + 1));\n    }, 1000);\n  }\n\n  mergeSort() {\n    this.setState({ disabled: true });\n    setTimeout(() => {\n      const animations = getMergeSortAnimations(this.state.array);\n      let count = 0;\n      const arrayBlocks = document.getElementsByClassName(\"grid-item\");\n      for (let i = 0; i < animations.length; i++) {\n        setTimeout(() => {\n          const [blockOneIdx, newColor] = animations[i];\n          const blockOneStyle = arrayBlocks[blockOneIdx].style;\n          blockOneStyle.backgroundColor = color[newColor];\n          blockOneStyle.transition = \"150ms all\";\n        }, i * ANIMATION_SPEED);\n        count++;\n      }\n      setTimeout(() => {\n        for (let i = 0; i < arrayBlocks.length; i++) {\n          setTimeout(() => {\n            arrayBlocks[i].classList.add(\"popupBlocks\");\n          }, ANIMATION_SPEED * i);\n        }\n        this.setState({ disabled: false });\n      }, ANIMATION_SPEED * (count + 1));\n    }, 1000);\n  }\n\n  quickSort() {\n    const animations = [];\n    getQuickSortAnimations(\n      this.state.array,\n      0,\n      this.state.array.length - 1,\n      animations\n    );\n    this.visualiseAnimations(animations, 3.5);\n  }\n\n  bubbleSort() {\n    const animations = getBubbleSortAnimations(this.state.array);\n    this.visualiseAnimations(animations, 0.4);\n  }\n\n  insertionSort() {\n    const animations = getInsertionSortAnimations(this.state.array);\n    this.visualiseAnimations(animations, 0.8);\n  }\n\n  selectionSort() {\n    const animations = getSelectionSortAnimations(this.state.array);\n    this.visualiseAnimations(animations, 50);\n  }\n\n  heapSort() {\n    const animations = [];\n    getHeapSortAnimations(this.state.array, animations);\n    this.visualiseAnimations(animations, 2);\n  }\n\n  render() {\n    const { disabled } = this.state;\n    return (\n      <div>\n        <BackBar />\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col-sm-1\"></div>\n            <div className=\"col-sm-7\">\n              <div className=\"box shadowT board mt-2\" id=\"sortingBoard\"></div>\n            </div>\n            <div className=\"col-sm-3 mt-2\">\n              <InputGroup>\n                <InputGroup.Prepend>\n                  <Button\n                    onClick={() => this.resetArray()}\n                    variant=\"danger\"\n                    disabled={disabled}\n                  >\n                    Reset\n                  </Button>\n                </InputGroup.Prepend>\n                <Form.Control\n                  id=\"sortingAlgoDropDown\"\n                  disabled={disabled}\n                  defaultValue=\"0\"\n                  as=\"select\"\n                >\n                  <option disabled value=\"0\">\n                    Algorithm\n                  </option>\n                  <option value=\"1\">Bubble Sort</option>\n                  <option value=\"2\">Selection Sort</option>\n                  <option value=\"3\">Insertion Sort</option>\n                  <option value=\"4\">Quick Sort</option>\n                  <option value=\"5\">Heap Sort</option>\n                  <option value=\"6\">Merge Sort</option>\n                </Form.Control>\n                <InputGroup.Append>\n                  <Button\n                    onClick={() => this.selectAlgorithm()}\n                    disabled={disabled}\n                    variant=\"success\"\n                  >\n                    Sort\n                  </Button>\n                </InputGroup.Append>\n              </InputGroup>\n              <ComplexityTable />\n            </div>\n            <div className=\"col-sm-1\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import { swap } from \"./swap\";\n\nexport function getBubbleSortAnimations(array = []) {\n  const animations = [];\n  let isSorted = false;\n  let counter = 0;\n  while (!isSorted) {\n    isSorted = true;\n    for (let i = 0; i < array.length - 1 - counter; i++) {\n      if (array[i] > array[i + 1]) {\n        swap(i, i + 1, array);\n        isSorted = false;\n        animations.push([i, i + 1, array[i], array[i + 1]]);\n      } else {\n        animations.push([i, i + 1, array[i], array[i + 1]]);\n      }\n    }\n    counter++;\n  }\n  return animations;\n}\n","import { swap } from \"./swap\";\n\nexport function getInsertionSortAnimations(array = []) {\n  const animations = [];\n  for (let i = 0; i < array.length; i++) {\n    let j = i;\n    while (j > 0 && array[j] < array[j - 1]) {\n      swap(j, j - 1, array);\n      animations.push([j, j - 1, array[j], array[j - 1]]);\n      j -= 1;\n    }\n  }\n  return animations;\n}\n","import { swap } from \"./swap\";\n\nexport function getSelectionSortAnimations(array = []) {\n  const animations = [];\n  let currentIdx = 0;\n  while (currentIdx < array.length - 1) {\n    let smallestIdx = currentIdx;\n    for (let i = currentIdx + 1; i < array.length; i++) {\n      if (array[smallestIdx] > array[i]) smallestIdx = i;\n    }\n    if (currentIdx < smallestIdx) {\n      swap(currentIdx, smallestIdx, array);\n      animations.push([\n        currentIdx,\n        smallestIdx,\n        array[currentIdx],\n        array[smallestIdx],\n      ]);\n    }\n    currentIdx++;\n  }\n  return animations;\n}\n","import React from \"react\";\n\nconst Header = ({ title, colorName = \"white\" }) => (\n  <div>\n    <h2 style={{ color: colorName }} className=\"mt-3 text-center\">\n      {title}\n    </h2>\n  </div>\n);\n\nexport default Header;\n","import React from \"react\";\n\nconst ArrayTile = ({ idx, val, type }) =>\n  type === \"binarySearch\" ? (\n    <div className=\"b-array-bar\">\n      {`${val}`}\n      <br />\n      <span>{`${idx}`}</span>\n    </div>\n  ) : (\n    <div className=\"l-array-bar\">\n      {`${val}`}\n      <br />\n      <span>{`${idx}`}</span>\n    </div>\n  );\n\nexport default ArrayTile;\n","import React from \"react\";\n\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\n\nimport { randomIntFromInterval } from \"./../../utils/randomIntFromInterval.js\";\nimport { binarySearchAnimations } from \"./../searchingAlgorithms\";\n\nimport Header from \"./../../utils/header\";\nimport ArrayTile from \"./../arrayTile\";\n\n//Stylesheets\nimport \"./binarySearch.css\";\n\nconst NUMBER_OF_ARRAY_BARS = 19;\nconst DEFAULT_COLOR = \"#212121\";\nconst FOUND_COLOR = \"#2ecc71\";\nconst NOT_FOUND_COLOR = \"#FA405A\";\nconst ANIMATION_SPEED_SECONDS = 0.5;\n\nexport default class BinarySearch extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      found: false,\n      disabled: false,\n      elementFoundAt: 0,\n      target: null,\n      msgAfterExecution: null,\n      previousLength: 0,\n      animations: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    let array = [];\n    const prevArray = document.getElementsByClassName(\"b-array-bar\");\n    document.getElementById(\"binarySearchTargetVal\").value = \"\";\n    for (let idx = 0; idx < prevArray.length; idx++) {\n      prevArray[idx].style.backgroundColor = DEFAULT_COLOR;\n      prevArray[idx].classList.remove(\"growFind\");\n      prevArray[idx].classList.remove(\"highlight\");\n    }\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 850));\n    }\n    let sortedArray = array.slice().sort((a, b) => a - b);\n    this.setState({\n      array: sortedArray,\n      found: false,\n      disabled: false,\n      msgAfterExecution: null,\n      previousLength: this.state.animations.length,\n    });\n  }\n\n  hightlightWithinBounds(start, end, arrayTiles) {\n    for (let i = start; i <= end; i++) {\n      arrayTiles[i].style.backgroundColor = NOT_FOUND_COLOR;\n      arrayTiles[i].style.transition = \"100ms all\";\n    }\n  }\n\n  resetAllTiles(arrayTiles) {\n    for (let i = 0; i < arrayTiles.length; i++) {\n      arrayTiles[i].style.backgroundColor = DEFAULT_COLOR;\n      arrayTiles[i].style.transition = \"100ms all\";\n    }\n  }\n\n  binarySearch() {\n    const { array } = this.state;\n    const animations = [];\n    let count = 0;\n    const arrayTiles = document.getElementsByClassName(\"b-array-bar\");\n    const target = document.getElementById(\"binarySearchTargetVal\").value;\n    if (target === \"\") return;\n\n    binarySearchAnimations(\n      array,\n      0,\n      array.length - 1,\n      parseInt(target),\n      animations\n    );\n\n    for (let k = 0; k < animations.length; k++) {\n      const [left, right, mid, found] = animations[k];\n      count++;\n\n      if (k === animations.length - 1 && found) {\n        setTimeout(() => {\n          this.setState({ disabled: true, found: true });\n          this.resetAllTiles(arrayTiles);\n          arrayTiles[mid].classList.add(\"highlight\");\n          arrayTiles[mid].style.backgroundColor = FOUND_COLOR;\n        }, (k + 1) * ANIMATION_SPEED_SECONDS * 1000);\n      }\n\n      if (left === 0 && right === 0 && mid === 0 && !found) {\n        setTimeout(() => {\n          console.log(\"ELement not found\");\n          this.setState({\n            msgAfterExecution: `Element not found`,\n            found: false,\n          });\n          this.resetAllTiles(arrayTiles);\n        }, (k + 1) * ANIMATION_SPEED_SECONDS * 1000);\n      }\n\n      setTimeout(() => {\n        this.setState({ disabled: true });\n        this.resetAllTiles(arrayTiles);\n        this.hightlightWithinBounds(left, right, arrayTiles);\n      }, k * 1000 * ANIMATION_SPEED_SECONDS);\n    }\n\n    setTimeout(() => {\n      this.setState({ disabled: false });\n    }, count * 1000 * ANIMATION_SPEED_SECONDS);\n  }\n\n  render() {\n    const { array, found, disabled, msgAfterExecution } = this.state;\n\n    return (\n      <div>\n        <div className=\"container-fluid p-4\">\n          <center>\n            <Header colorName=\"white\" title=\"Binary Search\" />\n            <div className=\"row\">\n              <div className=\"container\">\n                <div className=\"col-sm-1\"></div>\n                <InputGroup className=\"col-sm-6\">\n                  <FormControl\n                    type=\"number\"\n                    id=\"binarySearchTargetVal\"\n                    placeholder=\"Find\"\n                  />\n                  <InputGroup.Append>\n                    <Button\n                      id=\"binarySearchBtn\"\n                      onClick={() => this.binarySearch()}\n                      disabled={disabled}\n                      variant=\"success\"\n                    >\n                      Search\n                    </Button>\n                    <Button\n                      id=\"binarySearchResetArray\"\n                      onClick={() => this.resetArray()}\n                      disabled={disabled}\n                      variant=\"danger\"\n                    >\n                      Reset Array\n                    </Button>\n                  </InputGroup.Append>\n                </InputGroup>\n                <div className=\"col-sm-1 \"></div>\n              </div>\n            </div>\n            {!found ? <p className=\"not-found\">{msgAfterExecution}</p> : null}\n            <br />\n            <div className=\"container-fluid\">\n              {array.map((value, idx) => (\n                <ArrayTile\n                  type={\"binarySearch\"}\n                  key={idx}\n                  idx={idx}\n                  val={value}\n                />\n              ))}\n            </div>\n          </center>\n        </div>\n      </div>\n    );\n  }\n}\n","export function linearSearchAnimations(array, target) {\n  let animations = [];\n  for (let i = 0; i < array.length; i++) {\n    const ele = array[i];\n    const tar = parseInt(target);\n    if (ele === tar) {\n      animations.push([i, ele, true]);\n      break;\n    } else {\n      animations.push([i, ele, false]);\n    }\n  }\n  return animations;\n}\n\nexport function binarySearchAnimations(\n  array,\n  left,\n  right,\n  element,\n  animations = []\n) {\n  if (right >= left) {\n    let mid = parseInt(left + (right - left) / 2);\n    if (array[mid] === element) {\n      animations.push([left, right, mid, true]);\n      return true;\n    } else if (array[mid] > element) {\n      animations.push([left, right, mid, false]);\n      binarySearchAnimations(array, left, mid - 1, element, animations);\n    } else {\n      animations.push([left, right, mid, false]);\n      binarySearchAnimations(array, mid + 1, right, element, animations);\n    }\n    return false;\n  }\n}\n","import React from \"react\";\n\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\n\nimport { randomIntFromInterval } from \"./../../utils/randomIntFromInterval.js\";\nimport { linearSearchAnimations } from \"./../searchingAlgorithms\";\n\nimport Header from \"./../../utils/header\";\nimport ArrayTile from \"./../arrayTile\";\n\n// Stylesheets\nimport \"./linearSearch.css\";\n\nconst NUMBER_OF_ARRAY_BARS = 19;\nconst DEFAULT_COLOR = \"#212121\";\nconst FOUND_COLOR = \"#2ecc71\";\nconst NOT_FOUND_COLOR = \"#FA405A\";\nconst ANIMATION_SPEED_SECONDS = 0.5;\n\nexport default class LinearSearch extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      found: false,\n      disabled: false,\n      elementFoundAt: 0,\n      target: null,\n      msgAfterExecution: \"\",\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    const prevArray = document.getElementsByClassName(\"l-array-bar\");\n    const found = false;\n    const disabled = false;\n    document.getElementById(\"targetVal\").value = \"\";\n    for (let idx = 0; idx < prevArray.length; idx++) {\n      prevArray[idx].style.backgroundColor = DEFAULT_COLOR;\n      prevArray[idx].classList.remove(\"growFind\");\n      prevArray[idx].classList.remove(\"highlight\");\n    }\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 730));\n    }\n    this.setState({ array, found, disabled, msgAfterExecution: \"\" });\n  }\n\n  linearSearch() {\n    var msg = \"\";\n    const target = document.getElementById(\"targetVal\").value;\n    if (target === \"\") return;\n    const animations = linearSearchAnimations(this.state.array, target);\n    console.log(animations);\n    let count = 0;\n\n    for (let i = 0; i < animations.length; i++) {\n      const [idx, currentEle, found] = animations[i];\n      const arrayBars = document.getElementsByClassName(\"l-array-bar\");\n      const arrayBar = arrayBars[idx];\n      const arrayBarStyle = arrayBar.style;\n\n      count++;\n\n      if (found) {\n        msg = `${currentEle} found at index ${idx}`;\n        setTimeout(() => {\n          this.setState({\n            found: true,\n            disabled: true,\n            elementFoundAt: idx,\n            target: currentEle,\n          });\n          arrayBarStyle.backgroundColor = FOUND_COLOR;\n          arrayBar.classList.add(\"growFind\");\n          arrayBar.classList.add(\"highlight\");\n        }, i * ANIMATION_SPEED_SECONDS * 1000);\n        break;\n      } else {\n        msg = `${target} not found`;\n        setTimeout(() => {\n          this.setState({\n            found: false,\n            disabled: true,\n          });\n          arrayBarStyle.backgroundColor = NOT_FOUND_COLOR;\n          arrayBar.classList.add(\"growFind\");\n        }, i * ANIMATION_SPEED_SECONDS * 1000);\n      }\n    }\n    setTimeout(() => {\n      this.setState({\n        disabled: false,\n        msgAfterExecution: msg,\n      });\n    }, (count + 1) * ANIMATION_SPEED_SECONDS * 1000);\n  }\n\n  render() {\n    const { array, found, disabled, msgAfterExecution } = this.state;\n\n    return (\n      <div>\n        <div className=\"container-fluid p-4\">\n          <center>\n            <Header colorName=\"white\" title=\"Linear Search\" />\n            <div className=\"row\">\n              <div className=\"col-sm-1\"></div>\n              <div className=\"container\">\n                <InputGroup className=\"col-sm-6\">\n                  <FormControl\n                    type=\"number\"\n                    id=\"targetVal\"\n                    placeholder=\"Find\"\n                  />\n                  <InputGroup.Append>\n                    <Button\n                      onClick={() => this.linearSearch()}\n                      disabled={disabled}\n                      variant=\"success\"\n                    >\n                      Search\n                    </Button>\n                    <Button\n                      onClick={() => this.resetArray()}\n                      disabled={disabled}\n                      variant=\"danger\"\n                    >\n                      Reset Array\n                    </Button>\n                  </InputGroup.Append>\n                </InputGroup>\n              </div>\n              <div className=\"col-sm-1 \"></div>\n            </div>\n            <br />\n            {!found ? (\n              <p className=\"found growFind\">{msgAfterExecution}</p>\n            ) : null}\n            <div className=\"container-fluid\">\n              {array.map((value, idx) => (\n                <ArrayTile\n                  type={`linearSearch`}\n                  key={idx}\n                  idx={idx}\n                  val={value}\n                />\n              ))}\n            </div>\n          </center>\n        </div>\n      </div>\n    );\n  }\n}\n","/*\n-----------------------\nBACKTRACKING ALGORITHMS\n-----------------------\n*/\n\n/* -----------------------\nN Queen Problem Algorithms\n-------------------------- */\n\nfunction createBoard(size) {\n  const board = [];\n  for (let i = 0; i < size; i++) {\n    board.push(getRowsOfZeroes(size));\n  }\n  return board;\n}\n\nexport function getNQueensAnimations(size, animations = []) {\n  const board = createBoard(size);\n  solveNQueenUtil(board, 0, animations);\n  return board;\n}\n\nfunction solveNQueenUtil(board = [], col, animations = []) {\n  let N = board.length;\n\n  if (col >= N) return true;\n\n  for (let i = 0; i < N; i++) {\n    if (isSafe(board, i, col)) {\n      board[i][col] = true;\n      animations.push([i, col, true]);\n      if (solveNQueenUtil(board, col + 1, animations)) return true;\n      board[i][col] = false;\n      animations.push([i, col, false]);\n    }\n  }\n  return false;\n}\n\nfunction isSafe(board = [], row, col) {\n  let N = board.length;\n\n  for (let i = 0; i < col; i++) {\n    if (board[row][i] === true) {\n      return false;\n    }\n  }\n  for (let i = row, j = col; i >= 0 && j >= 0; i--, j--) {\n    if (board[i][j] === true) {\n      return false;\n    }\n  }\n  for (let i = row, j = col; j >= 0 && i < N; i++, j--) {\n    if (board[i][j] === true) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function getRowsOfZeroes(size) {\n  const row = [];\n  for (let i = 0; i < size; i++) {\n    row.push(false);\n  }\n  return row;\n}\n\n/* ----------------------\nRat In A Maze Solving Algorithms\n------------------------- */\n\nfunction isRatSafe(maze = [], x, y) {\n  let mazeRows = maze.length;\n  let mazeCols = maze[0].length;\n\n  return x >= 0 && x < mazeRows && y >= 0 && y < mazeCols && maze[x][y] === 1;\n}\n\nfunction solveRatInAMaze(maze = [], x, y, sol = [], animations = []) {\n  let endOfMazeX = maze.length - 1;\n  let endOfMazeY = maze[0].length - 1;\n\n  // Goal State || Base Case\n  if (x === endOfMazeX && y === endOfMazeY && maze[x][y] === 1) {\n    sol[x][y] = 1;\n    animations.push([x, y, true]);\n    return true;\n  }\n\n  // Check if maze is valid\n  if (isRatSafe(maze, x, y)) {\n    animations.push([x, y, true]);\n    sol[x][y] = 1;\n\n    // Move Down\n    if (solveRatInAMaze(maze, x, y + 1, sol, animations)) return true;\n    // Move Right\n    if (solveRatInAMaze(maze, x + 1, y, sol, animations)) return true;\n    // No Move is Possible -> Backtrack\n    else {\n      animations.push([x, y, false]);\n      sol[x][y] = 0;\n      return false;\n    }\n  }\n  return false;\n}\n\nexport function solveMaze(maze = [], sol = []) {\n  const animations = [];\n  if (!solveRatInAMaze(maze, 0, 0, sol, animations)) {\n    console.log(\"Solution doesn't\");\n    return [sol, []];\n  }\n  return [sol, animations];\n}\n\nexport function prepareSolutionBoardOfZeroes(size) {\n  let sol = [];\n  for (let i = 0; i < size; i++) {\n    var temp = [];\n    for (let j = 0; j < size; j++) {\n      temp.push(0);\n    }\n    sol.push(temp);\n  }\n  return sol;\n}\n","import React from \"react\";\nimport crown from \"./../nQueensProblem/crown.png\";\n\nimport { getNQueensAnimations } from \"./../backTrackingAlgorithms\";\n\nimport BackBar from \"./../../utils/backbar\";\n\n// Stylesheets\nimport \"./../../utils/animate.min.css\";\nimport \"./nQueensProblem.css\";\n\nconst SIZE_OF_BOARD = 4;\nvar ANIMATION_SPEED_SECONDS = 1.5;\n\nconst CELL_COLOR = \"#BFC9CA\";\nconst SAFE_COLOR = \"#DC143C\";\nconst CROWN_COLOR = \"#FFFFFF\";\nconst SAFE = \"#2ECC71\";\n\nexport default class NQueensProblem extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { disabled: false };\n  }\n\n  componentDidMount() {\n    this.drawBoard(SIZE_OF_BOARD);\n  }\n\n  drawBoard(SIZE) {\n    // This function draws the NxN board and according to the size applies styling which makes easier to visualise huge sized boards on small screens.\n    let padding = 0;\n    let fontSize = 0;\n\n    // Deleting the previous board cells and results section for new start\n    document.getElementById(\"nQueensBoard\").innerHTML = \"\";\n    document.getElementById(\"NQueenResults\").innerHTML = \"\";\n\n    // Calculating the board size and style values\n    switch (SIZE) {\n      case 4:\n        padding = 20;\n        fontSize = 30;\n        ANIMATION_SPEED_SECONDS = 1.5;\n        break;\n      case 5:\n      case 6:\n        padding = 10;\n        fontSize = 25;\n        ANIMATION_SPEED_SECONDS = 1;\n        break;\n      case 7:\n        padding = 7;\n        fontSize = 20;\n        ANIMATION_SPEED_SECONDS = 0.5;\n        break;\n      case 8:\n        padding = 7;\n        fontSize = 18;\n        ANIMATION_SPEED_SECONDS = 0.5;\n        break;\n      default:\n        return;\n    }\n    // creating the board\n    const container = document.getElementById(\"nQueensBoard\");\n\n    // Adding Rows and Columns to the board\n    container.style.setProperty(\"--Qgrid-rows\", SIZE);\n    container.style.setProperty(\"--Qgrid-cols\", SIZE);\n\n    // Adding cells to the board\n    for (let j = 0; j < SIZE * SIZE; j++) {\n      let cell = document.createElement(\"div\");\n      let item = document.createElement(\"i\");\n\n      cell.appendChild(item).className = \"fas fa-crown\";\n      container.appendChild(cell).className = \"Qgrid-item q-array-tile\";\n    }\n\n    // Styling the cells\n    const arrayTiles = document.getElementsByClassName(\"q-array-tile\");\n    const crownsI = document.getElementsByClassName(\"fa-crown\");\n    for (let l = 0; l < arrayTiles.length; l++) {\n      arrayTiles[l].style.padding = `${padding}px`;\n      arrayTiles[l].style.backgroundColor = CELL_COLOR;\n      crownsI[l].style.fontSize = `${fontSize}px`;\n      crownsI[l].style.color = CELL_COLOR;\n    }\n\n    // Since everything is just created dynamically we have to apply styles\n    // one by one to each element because depending on the board size we are\n    // determining the corressponding styles.\n  }\n\n  NQueensProblem() {\n    // Getting the size from the input box\n    let size = parseInt(document.getElementById(\"boardInput\").value);\n\n    // checking if size is greater than 3 because no solutions exist for n <= 3\n    // checking if size is lesser than 17 because the user's RAM will be\n    // used heavily for greater sizes and page can be unresponsive.\n    if (size < 4 || size > 8) {\n      alert(\"Board Size must be between 4 and 8\");\n      return;\n    }\n    // finally drawing the board\n    this.drawBoard(size);\n\n    // getting the cells for visualisations\n    const arrayTiles = document.getElementsByClassName(\"q-array-tile\");\n\n    // getting the crown element inside the cell\n    const crown = document.getElementsByClassName(\"fa-crown\");\n\n    // getting the results div\n    const resultsDiv = document.getElementById(\"NQueenResults\");\n\n    // getting the Animations for NQueens.\n    const NQueensAnimations = [];\n    getNQueensAnimations(size, NQueensAnimations);\n\n    let count = 0;\n    for (let i = 0; i < NQueensAnimations.length; i++) {\n      count++;\n\n      // Disabling all the input sources untill Algorithm is finished.\n      this.setState({ disabled: true });\n\n      const [row, col, isQueenSafe] = NQueensAnimations[i];\n      const idx = size * row + col;\n\n      // Creating an alert message for Progress Section\n      let alert = document.createElement(\"div\");\n      alert.classList.add(\"alert\");\n      alert.classList.add(\"animate__animated\");\n      alert.classList.add(\"animate__slideInDown\");\n\n      setTimeout(() => {\n        // checking if this is a valid position\n        if (isQueenSafe) {\n          // valid positions are highlighted as RED which is royal\n          arrayTiles[idx].style.backgroundColor = SAFE_COLOR;\n          arrayTiles[idx].classList.add(\"safe-queen\");\n\n          // making the crown visible\n          crown[idx].style.color = CROWN_COLOR;\n          // popping up the crown with an effect\n          crown[idx].classList.add(\"popupQueen\");\n\n          // Adding the alert message for results div\n          alert.innerHTML = `Trying Queen at row ${row} and col ${col}`;\n          alert.classList.add(\"alert-success\");\n        } else {\n          // invalid positions are highlighted as default board color\n          arrayTiles[idx].style.backgroundColor = CELL_COLOR;\n          arrayTiles[idx].classList.remove(\"safe-queen\");\n\n          // making the crown invisible\n          crown[idx].style.color = CELL_COLOR;\n          // removing the popup animation\n          crown[idx].classList.remove(\"popupQueen\");\n\n          // Adding the alert message for results div\n          alert.innerHTML = `row ${row} and col ${col} didn't work out. Backtracking`;\n          alert.classList.add(\"alert-danger\");\n        }\n        // adding alert to results div\n        resultsDiv.prepend(alert);\n        // adding a transition for color change\n        arrayTiles[idx].style.transition = \"200ms all\";\n      }, ANIMATION_SPEED_SECONDS * 1000 * i);\n      // looping according to animation speeds\n    }\n\n    // getting the queens at final safe positions\n    const trueValues = document.getElementsByClassName(\"safe-queen\");\n\n    setTimeout(() => {\n      for (let i = 0; i < trueValues.length; i++) {\n        trueValues[i].style.backgroundColor = SAFE;\n        trueValues[i].style.transition = \"300ms all\";\n\n        // Enabling the input sources for another visualization\n        this.setState({ disabled: false });\n\n        // This means we have reached at final positions with Queens placed\n        // on Valid positions\n        if (i === trueValues.length - 1) {\n          // Adding final alert message\n          let alert = document.createElement(\"div\");\n          alert.classList.add(\"alert\");\n          alert.classList.add(\"animate__animated\");\n          alert.classList.add(\"animate__slideInUp\");\n          alert.innerHTML = `All Queens have been placed on Valid positions`;\n          alert.classList.add(\"alert-primary\");\n\n          // Prepending the alert message\n          resultsDiv.prepend(alert);\n        }\n      }\n    }, (count + 1) * ANIMATION_SPEED_SECONDS * 1000);\n  }\n\n  render() {\n    const { disabled } = this.state;\n\n    return (\n      <div>\n        <BackBar />\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-sm-8\">\n              <div className=\"row\">\n                <div className=\"col-sm-12\">\n                  <center>\n                    <h2 className=\"text-light\">\n                      <img className=\"mb-2\" src={crown} width=\"40px\" alt={\"\"} />{\" \"}\n                      N-Queens Visualiser\n                    </h2>\n                  </center>\n                </div>\n              </div>\n              <div className=\"Qbox Qboard mb-2\" id=\"nQueensBoard\"></div>\n              <div className=\"row\">\n                <div className=\"input-group mt-1 container col-sm-6\">\n                  <div className=\"input-group-prepend\">\n                    <span className=\"input-group-text\">Board Size</span>\n                  </div>\n                  <input\n                    type=\"number\"\n                    id=\"boardInput\"\n                    className=\"form-control\"\n                    placeholder=\"Board Size\"\n                    defaultValue=\"4\"\n                    readOnly={disabled}\n                  />\n                  <div className=\"input-group-append\">\n                    <button\n                      className=\"btn btn-secondary\"\n                      disabled={disabled}\n                      onClick={() => this.NQueensProblem()}\n                    >\n                      Visualise N-Queens\n                    </button>\n                  </div>\n                </div>\n              </div>\n              {!disabled ? (\n                <center>\n                  <small className=\"text-muted\">\n                    <div className=\"mt-2\"></div>\n                    The Visualiser works best for board sizes between 4 and 8\n                    inclusive. Larger board sizes would make the page\n                    unresponsive because of huge number of computations.\n                  </small>\n                </center>\n              ) : null}\n            </div>\n            <div id=\"NQueenResults\" className=\"col-sm-4 mt-3\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nimport NavBar from \"./utils/navbar\";\nimport { Route } from \"react-router-dom\";\n\n// Components\nimport IndexTable from \"./utils/indexTable\";\nimport WordSearch from \"./wordSearchVisualiser/wordSearch\";\nimport PathFinder from \"./PathFinder/PathFinder\";\nimport SortingVisualiser from \"./sortingAlgorithms/sortingVisualiser\";\nimport BinarySearch from \"./searchingAlgorithms/binarySearch/binarySearch\";\nimport LinearSearch from \"./searchingAlgorithms/linearSearch/linearSearch\";\nimport NQueensProblem from \"./backTrackingAlgorithms/nQueensProblem/nQueensProblem\";\n\n//  Stylesheets\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.scss\";\nimport BackBar from \"./utils/backbar\";\n\nconst searchCombined = () => {\n  return (\n    <div>\n      <BackBar />\n      <LinearSearch />\n      <BinarySearch />\n    </div>\n  );\n};\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div>\n        <NavBar />\n        <Route exact path=\"/\" component={IndexTable} />\n        <Route path=\"/sorting\" component={SortingVisualiser} />\n        <Route path=\"/searching\" component={searchCombined} />\n        <Route path=\"/n-queens-problem\" component={NQueensProblem} />\n        <Route path=\"/pathfinder\" component={PathFinder} />\n        <Route path=\"/word-search\" component={WordSearch} />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport { HashRouter as Router } from \"react-router-dom\";\n\nimport \"./index.scss\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}